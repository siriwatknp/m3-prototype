@layer mui-components {
  .root {
    --height: 40px;
    --gap: 1rem;
    --padding-left: calc(var(--i-padding-inline, 1rem) - var(--border-width));
    --padding-right: calc(var(--i-padding-inline, 1rem) - var(--border-width));
    --border-width: 1px;
    --border-color: var(--md-sys-color-outline);
    --border-radius: var(--md-sys-shape-corner-extra-small);
    --background: transparent;
    --color: var(--md-sys-color-on-surface);
    --focused-border-width: 2px;
    --focused-border-color: var(--md-sys-color-primary);
    --label-shrink-font-size: var(--md-sys-typescale-label-small-size);
    --label-shrink-line-height: var(--md-sys-typescale-label-small-line-height);
    --label-shrink-top: 8px;
    --label-inset: 0.5px;
    --start-adornment-min-width: 1.5rem;
    --placeholder-opacity: 0;

    font-family: var(--md-sys-typescale-body-large-font);
    font-size: var(--md-sys-typescale-body-large-size);
    font-weight: var(--md-sys-typescale-body-large-weight);
    line-height: var(--md-sys-typescale-body-large-line-height);
    color: var(--color);
    display: flex;
    gap: var(--gap);
    box-sizing: border-box;
    height: var(--height);
    align-items: center;
    padding: 0 var(--padding-right) 0 var(--padding-left);
    position: relative;
    border-width: var(--border-width);
    border-style: solid;
    border-color: var(--border-color);
    border-radius: var(--border-radius);
    background: var(--background);
    outline: var(--outline);
    outline-offset: calc(-1 * var(--focused-border-width));
    transition: 0.2s;
  }

  .root:hover {
    --border-color: var(--md-sys-color-on-surface);
  }

  :global(.Mui-error) .root {
    --border-color: var(--md-sys-color-error);
  }

  .root:has(input:focus) {
    --outline: var(--focused-border-width) solid var(--md-sys-color-primary);
  }

  :global(.Mui-error) .root:has(input:focus) {
    --outline: var(--focused-border-width) solid var(--md-sys-color-error);
  }

  .root:has(input:disabled) {
    --background: color-mix(
      in srgb,
      var(--md-sys-color-on-surface) 4%,
      transparent
    );
    --color: var(--i-disabled-color);
  }

  .root:has(label) {
    --border-radius: var(--md-sys-shape-corner-extra-small-top);
  }

  .root:has(label) input::placeholder {
    opacity: var(--placeholder-opacity);
  }

  .root:has(label) input:focus {
    --placeholder-opacity: 1;
  }

  .root:has(label):has(input:focus),
  .root:has(label):has(input:not(:placeholder-shown)),
  .root:has(label):has(input:-webkit-autofill) {
    --outline: none;
  }

  .input {
    --padding-top: 0px;
    --caret-color: var(--md-sys-color-primary);
    caret-color: var(--caret-color);
    font: inherit;
    letter-spacing: inherit;
    color: currentColor;
    box-sizing: content-box;
    background: none;
    border: 0;
    padding: 0;
    padding-top: var(--padding-top);
    outline: 0;
    min-width: 0;
    width: 100%;
  }

  .input:invalid {
    box-shadow: none;
  }

  .input::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  .input:-webkit-autofill,
  .input:-webkit-autofill:focus {
    transition: background-color 0s 600000s, color 0s 600000s !important;
  }

  label ~ .input:not(:has(~ fieldset)) {
    --padding-top: calc(
      var(--label-shrink-top) + var(--label-shrink-line-height) / 2
    );
  }

  .floatingLabel {
    --color: var(--md-sys-color-on-surface-variant);
    --font-size: var(--md-sys-typescale-body-medium-size);
    --line-height: var(--md-sys-typescale-body-medium-line-height);
    position: absolute;
    left: calc(
      var(--padding-left) + var(--label-inset) +
        var(--_start-adornment-inset, 0px)
    );
    top: var(--top, 50%);
    transform: translateY(-50%);
    transition: all 0.1s;
    font-size: var(--font-size);
    line-height: var(--line-height);
    color: var(--i-disabled-color, var(--color));
  }

  .floatingLabel:has(~ input:disabled) {
    --color: var(--i-disabled-color);
  }

  .floatingLabel:has(~ input:focus),
  .floatingLabel:has(~ input:not(:placeholder-shown)),
  .floatingLabel:has(~ input:-webkit-autofill) {
    --color: var(--md-sys-color-primary);
    --top: calc(var(--label-shrink-top) + var(--label-shrink-line-height) / 2);
    --font-size: var(--label-shrink-font-size);
    --line-height: var(--label-shrink-line-height);
  }
}

@layer mui-components-error {
  :global(.Mui-error) .input {
    --caret-color: var(--md-sys-color-error);
  }
  :global(.Mui-error) .floatingLabel {
    --color: var(--md-sys-color-error);
  }
}

@layer mui-components-filled {
  .root:has(label):not(:has(fieldset)) {
    --outline: none;
    --height: 56px;
    --border-width: 0px;
    --background: var(--md-sys-color-surface-container-highest);
  }

  .root:has(label):not(:has(fieldset)):hover {
    --background: color-mix(
      in srgb,
      var(--md-sys-color-surface-container-highest),
      var(--md-sys-color-on-surface) 8%
    );
  }

  .root:has(label):not(:has(fieldset)):has(input:disabled) {
    --background: color-mix(
      in srgb,
      var(--md-sys-color-on-surface) 4%,
      transparent
    );
  }
}

@layer mui-components-outlined {
  .root:has(fieldset) {
    --outline: none;
    --height: 56px;
    --label-shrink-top: calc(
      var(--label-shrink-line-height) / -2 + var(--border-width)
    );
    --border-radius: var(--md-sys-shape-corner-extra-small);
    border: none;
  }

  .root:has(fieldset):hover {
    --border-color: var(--md-sys-color-on-surface);
  }
}
